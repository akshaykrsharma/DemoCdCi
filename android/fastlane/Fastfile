# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

# 'Read the specs from the file'
def read_spec(key)
  file = File.read('fastlanespec.json')
  specs = JSON.parse(file)
  specs[key]
end 

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  def get_updated_version_code_from_playstore
    productionVersionCode = google_play_track_version_codes(package_name: read_spec('android_bundle_id'), track: "production", json_key: read_spec('release_manager_json_path'))
    alphaVersionCode = google_play_track_version_codes(package_name: read_spec('android_bundle_id'), track: "alpha", json_key: read_spec('release_manager_json_path'))
    internalVersionCode = google_play_track_version_codes(package_name: read_spec('android_bundle_id'), track: "internal", json_key: read_spec('release_manager_json_path'))
    betaVersionCode = google_play_track_version_codes(package_name: read_spec('android_bundle_id'), track: "beta", json_key: read_spec('release_manager_json_path'))
    maxValue=[productionVersionCode,alphaVersionCode,internalVersionCode,betaVersionCode].max[0].to_i + 1
  end


  desc "Deploy a new version to Alpha"
  lane :alpha do
  GRADLE_APK_OUTPUT_PATH="./app/build/outputs/apk/release/app-release.apk"
  GRADLE_AAB_OUTPUT_PATH="./app/build/outputs/apk/release/app.aab"
  increment_version_code(version_code: get_updated_version_code_from_playstore(), gradle_file_path: read_spec('gradle_file_path'))
   
    gradle(task: "clean assembleRelease")
    
    supply(
      track:"alpha",
      apk: "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}",
      json_key:"./secure/service-account-file.json"
    )

    # git_commit(
    #   path:"./app/build.gradle",
    #   message:"Fastlane Android released #{version_code} [ci skip]"
    # )
  end

  desc "check Current versionCode"
  lane :bundleNumber do
    puts get_updated_version_code_from_playstore()
  end



  desc "Deploy a new version to Internal"
  lane :internal do
  GRADLE_APK_OUTPUT_PATH="./app/build/outputs/apk/release/app-release.apk"
  GRADLE_AAB_OUTPUT_PATH="./app/build/outputs/apk/release/app.aab"
  
  increment_version_code(version_code: get_updated_version_code_from_playstore(), gradle_file_path: read_spec('gradle_file_path'))

  gradle(task: "clean assembleRelease")
    
    supply(
      track:"internal",
      apk: "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}",
      json_key:"./secure/service-account-file.json"
    )

    # git_commit(
    #   path:"../../*",
    #   message:"Fastlane internal Android released #{version_code} [ci skip]"
    # )


  end


  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
